name: Accessibility Audit

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run weekly accessibility audits
    - cron: '0 1 * * 1'

env:
  NODE_VERSION: '18'

jobs:
  accessibility-audit:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    defaults:
      run:
        working-directory: ./client
        
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: client/package-lock.json
        
    - name: Install dependencies
      run: npm ci
      
    - name: Install Playwright and accessibility tools
      run: |
        npx playwright install --with-deps chromium
        npm install --save-dev @axe-core/playwright axe-core
        
    - name: Start game server
      run: |
        cd ..
        python -m pip install -e .
        python -m sim.server &
        sleep 10
        
    - name: Run accessibility tests
      run: |
        npx playwright test tests/e2e/accessibility.spec.ts \
          --reporter=json \
          --output-dir=accessibility-results
      continue-on-error: true
      
    - name: Generate accessibility report
      run: |
        node -e "
        const fs = require('fs');
        
        let results = null;
        try {
          results = JSON.parse(fs.readFileSync('accessibility-results/results.json', 'utf8'));
        } catch (error) {
          console.error('Failed to read accessibility results');
          process.exit(1);
        }
        
        const report = {
          timestamp: new Date().toISOString(),
          summary: {
            totalTests: 0,
            passed: 0,
            failed: 0,
            violations: []
          },
          details: []
        };
        
        results.suites.forEach(suite => {
          suite.specs.forEach(spec => {
            report.summary.totalTests++;
            
            const testResult = {
              name: spec.title,
              status: spec.results[0]?.status || 'unknown',
              duration: spec.results[0]?.duration || 0,
              violations: []
            };
            
            if (testResult.status === 'passed') {
              report.summary.passed++;
            } else {
              report.summary.failed++;
              
              // Extract violation details from error messages
              const error = spec.results[0]?.error;
              if (error && error.message) {
                // Parse axe violations from error message
                try {
                  const axeMatch = error.message.match(/Expected.*violations.*but got.*(\[.*\])/s);
                  if (axeMatch) {
                    const violations = JSON.parse(axeMatch[1]);
                    testResult.violations = violations.map(v => ({
                      rule: v.id || 'unknown',
                      impact: v.impact || 'unknown',
                      description: v.description || 'No description',
                      nodes: v.nodes ? v.nodes.length : 0
                    }));
                    report.summary.violations.push(...testResult.violations);
                  }
                } catch (parseError) {
                  console.warn('Could not parse violation details');
                }
              }
            }
            
            report.details.push(testResult);
          });
        });
        
        fs.writeFileSync('accessibility-report.json', JSON.stringify(report, null, 2));
        
        console.log('Accessibility Audit Summary:');
        console.log('Total Tests:', report.summary.totalTests);
        console.log('Passed:', report.summary.passed);
        console.log('Failed:', report.summary.failed);
        console.log('Total Violations:', report.summary.violations.length);
        
        if (report.summary.violations.length > 0) {
          console.log('\nViolations by Impact:');
          const byImpact = {};
          report.summary.violations.forEach(v => {
            byImpact[v.impact] = (byImpact[v.impact] || 0) + 1;
          });
          console.log(JSON.stringify(byImpact, null, 2));
        }
        "
        
    - name: Upload accessibility report
      uses: actions/upload-artifact@v3
      with:
        name: accessibility-report-${{ github.run_number }}
        path: |
          client/accessibility-report.json
          client/accessibility-results/
          
    - name: Comment on PR with results
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          
          let report = null;
          try {
            report = JSON.parse(fs.readFileSync('./client/accessibility-report.json', 'utf8'));
          } catch (error) {
            console.log('Could not read accessibility report');
            return;
          }
          
          const { totalTests, passed, failed, violations } = report.summary;
          const passRate = ((passed / totalTests) * 100).toFixed(1);
          
          let comment = '## 🔍 Accessibility Audit Results\n\n';
          comment += '| Metric | Value |\n';
          comment += '|--------|-------|\n';
          comment += '| Total Tests | ' + totalTests + ' |\n';
          comment += '| Passed | ' + passed + ' ✅ |\n';
          comment += '| Failed | ' + failed + (failed > 0 ? ' ❌' : ' ✅') + ' |\n';
          comment += '| Pass Rate | ' + passRate + '% |\n';
          comment += '| Violations | ' + violations.length + ' |\n\n';
          
          if (violations.length > 0) {
            comment += '### 🚨 Accessibility Violations\n\n';
            
            // Group violations by impact
            const byImpact = {};
            violations.forEach(v => {
              if (!byImpact[v.impact]) byImpact[v.impact] = [];
              byImpact[v.impact].push(v);
            });
            
            ['critical', 'serious', 'moderate', 'minor'].forEach(impact => {
              if (byImpact[impact]) {
                const emoji = impact === 'critical' ? '🔴' : 
                            impact === 'serious' ? '🟠' : 
                            impact === 'moderate' ? '🟡' : '🔵';
                comment += '#### ' + emoji + ' ' + impact.toUpperCase() + ' (' + byImpact[impact].length + ')\n\n';
                
                byImpact[impact].slice(0, 5).forEach(v => {
                  comment += '- **' + v.rule + '**: ' + v.description + '\n';
                });
                
                if (byImpact[impact].length > 5) {
                  comment += '- ... and ' + (byImpact[impact].length - 5) + ' more\n';
                }
                comment += '\n';
              }
            });
            
            comment += '### 📋 Next Steps\n\n';
            comment += '1. Review the detailed accessibility report in the workflow artifacts\n';
            comment += '2. Fix critical and serious violations before merging\n';
            comment += '3. Consider fixing moderate violations for better user experience\n';
            comment += '4. Test with actual assistive technologies\n\n';
          } else {
            comment += '### 🎉 Great job! No accessibility violations found.\n\n';
          }
          
          comment += '**Report generated:** ' + new Date(report.timestamp).toLocaleString() + '\n';
          comment += '**Workflow:** [View Details](' + context.payload.repository.html_url + '/actions/runs/' + context.runId + ')';
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });

  lighthouse-audit:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: client/package-lock.json
        
    - name: Install dependencies
      run: |
        cd client
        npm ci
        
    - name: Install Lighthouse
      run: npm install -g lighthouse
      
    - name: Build application
      run: |
        cd client
        npm run build
        
    - name: Start application server
      run: |
        cd client
        npx serve -s dist -p 3000 &
        sleep 5
        
    - name: Run Lighthouse accessibility audit
      run: |
        lighthouse http://localhost:3000 \
          --only-categories=accessibility \
          --chrome-flags="--headless --no-sandbox --disable-dev-shm-usage" \
          --output=json \
          --output-path=./lighthouse-accessibility.json
          
    - name: Run Lighthouse performance audit
      run: |
        lighthouse http://localhost:3000 \
          --only-categories=performance \
          --chrome-flags="--headless --no-sandbox --disable-dev-shm-usage" \
          --output=json \
          --output-path=./lighthouse-performance.json
          
    - name: Parse Lighthouse results
      run: |
        node -e "
        const fs = require('fs');
        
        const accessibilityReport = JSON.parse(fs.readFileSync('lighthouse-accessibility.json', 'utf8'));
        const performanceReport = JSON.parse(fs.readFileSync('lighthouse-performance.json', 'utf8'));
        
        const summary = {
          timestamp: new Date().toISOString(),
          url: accessibilityReport.finalUrl,
          accessibility: {
            score: Math.round(accessibilityReport.categories.accessibility.score * 100),
            audits: {}
          },
          performance: {
            score: Math.round(performanceReport.categories.performance.score * 100),
            metrics: {}
          }
        };
        
        // Extract accessibility audit details
        Object.entries(accessibilityReport.audits).forEach(([key, audit]) => {
          if (audit.score !== null && audit.score < 1) {
            summary.accessibility.audits[key] = {
              title: audit.title,
              description: audit.description,
              score: audit.score,
              displayValue: audit.displayValue
            };
          }
        });
        
        // Extract performance metrics
        const perfAudits = performanceReport.audits;
        summary.performance.metrics = {
          firstContentfulPaint: perfAudits['first-contentful-paint']?.displayValue || 'N/A',
          largestContentfulPaint: perfAudits['largest-contentful-paint']?.displayValue || 'N/A',
          firstMeaningfulPaint: perfAudits['first-meaningful-paint']?.displayValue || 'N/A',
          speedIndex: perfAudits['speed-index']?.displayValue || 'N/A',
          totalBlockingTime: perfAudits['total-blocking-time']?.displayValue || 'N/A',
          cumulativeLayoutShift: perfAudits['cumulative-layout-shift']?.displayValue || 'N/A'
        };
        
        fs.writeFileSync('lighthouse-summary.json', JSON.stringify(summary, null, 2));
        
        console.log('Lighthouse Summary:');
        console.log('Accessibility Score:', summary.accessibility.score);
        console.log('Performance Score:', summary.performance.score);
        console.log('Failed Accessibility Audits:', Object.keys(summary.accessibility.audits).length);
        "
        
    - name: Upload Lighthouse reports
      uses: actions/upload-artifact@v3
      with:
        name: lighthouse-reports-${{ github.run_number }}
        path: |
          lighthouse-*.json

  wcag-validation:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    defaults:
      run:
        working-directory: ./client
        
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: client/package-lock.json
        
    - name: Install dependencies
      run: npm ci
      
    - name: Install WCAG validation tools
      run: npm install --save-dev pa11y pa11y-ci
      
    - name: Build and serve application
      run: |
        npm run build
        npx serve -s dist -p 3000 &
        sleep 5
        
    - name: Run WCAG 2.1 AA validation
      run: |
        npx pa11y http://localhost:3000 \
          --standard WCAG2AA \
          --reporter json \
          > wcag-validation.json
      continue-on-error: true
      
    - name: Parse WCAG results
      run: |
        node -e "
        const fs = require('fs');
        
        let results = [];
        try {
          const rawData = fs.readFileSync('wcag-validation.json', 'utf8');
          results = JSON.parse(rawData);
        } catch (error) {
          console.log('No WCAG validation results found');
        }
        
        const report = {
          timestamp: new Date().toISOString(),
          totalIssues: results.length,
          issuesByType: {},
          criticalIssues: []
        };
        
        results.forEach(issue => {
          const type = issue.type || 'unknown';
          report.issuesByType[type] = (report.issuesByType[type] || 0) + 1;
          
          if (type === 'error') {
            report.criticalIssues.push({
              code: issue.code,
              message: issue.message,
              selector: issue.selector,
              context: issue.context
            });
          }
        });
        
        fs.writeFileSync('wcag-report.json', JSON.stringify(report, null, 2));
        
        console.log('WCAG 2.1 AA Validation Summary:');
        console.log('Total Issues:', report.totalIssues);
        console.log('Issues by Type:', report.issuesByType);
        console.log('Critical Issues:', report.criticalIssues.length);
        "
        
    - name: Upload WCAG report
      uses: actions/upload-artifact@v3
      with:
        name: wcag-report-${{ github.run_number }}
        path: |
          client/wcag-*.json

  accessibility-summary:
    runs-on: ubuntu-latest
    needs: [accessibility-audit, lighthouse-audit, wcag-validation]
    if: always()
    
    steps:
    - name: Download all accessibility artifacts
      uses: actions/download-artifact@v3
      
    - name: Generate comprehensive accessibility report
      run: |
        echo "# 🔍 Comprehensive Accessibility Report" > accessibility-summary.md
        echo "Generated: $(date -u)" >> accessibility-summary.md
        echo "" >> accessibility-summary.md
        
        echo "## Test Results Summary" >> accessibility-summary.md
        echo "| Test Type | Status | Details |" >> accessibility-summary.md
        echo "|-----------|---------|---------|" >> accessibility-summary.md
        
        # Playwright accessibility tests
        if [ -d "accessibility-report-${{ github.run_number }}" ]; then
          VIOLATIONS=$(jq -r '.summary.violations | length' accessibility-report-${{ github.run_number }}/accessibility-report.json 2>/dev/null || echo "unknown")
          if [ "$VIOLATIONS" = "0" ]; then
            echo "| Playwright Tests | ✅ Pass | No violations found |" >> accessibility-summary.md
          else
            echo "| Playwright Tests | ⚠️ Issues | $VIOLATIONS violations detected |" >> accessibility-summary.md
          fi
        else
          echo "| Playwright Tests | ❌ Failed | Tests did not complete |" >> accessibility-summary.md
        fi
        
        # Lighthouse accessibility
        if [ -d "lighthouse-reports-${{ github.run_number }}" ]; then
          LIGHTHOUSE_SCORE=$(jq -r '.accessibility.score' lighthouse-reports-${{ github.run_number }}/lighthouse-summary.json 2>/dev/null || echo "unknown")
          if [ "$LIGHTHOUSE_SCORE" != "unknown" ] && [ "$LIGHTHOUSE_SCORE" -ge 90 ]; then
            echo "| Lighthouse Audit | ✅ Pass | Score: $LIGHTHOUSE_SCORE/100 |" >> accessibility-summary.md
          elif [ "$LIGHTHOUSE_SCORE" != "unknown" ]; then
            echo "| Lighthouse Audit | ⚠️ Issues | Score: $LIGHTHOUSE_SCORE/100 |" >> accessibility-summary.md
          else
            echo "| Lighthouse Audit | ❌ Failed | Could not determine score |" >> accessibility-summary.md
          fi
        else
          echo "| Lighthouse Audit | ❌ Failed | Tests did not complete |" >> accessibility-summary.md
        fi
        
        # WCAG validation
        if [ -d "wcag-report-${{ github.run_number }}" ]; then
          WCAG_ISSUES=$(jq -r '.totalIssues' wcag-report-${{ github.run_number }}/wcag-report.json 2>/dev/null || echo "unknown")
          if [ "$WCAG_ISSUES" = "0" ]; then
            echo "| WCAG 2.1 AA | ✅ Pass | No issues found |" >> accessibility-summary.md
          else
            echo "| WCAG 2.1 AA | ⚠️ Issues | $WCAG_ISSUES issues found |" >> accessibility-summary.md
          fi
        else
          echo "| WCAG 2.1 AA | ❌ Failed | Tests did not complete |" >> accessibility-summary.md
        fi
        
        echo "" >> accessibility-summary.md
        echo "## Detailed Findings" >> accessibility-summary.md
        
        # Add detailed sections for each test type
        echo "" >> accessibility-summary.md
        echo "### 🎯 Action Items" >> accessibility-summary.md
        echo "1. Review all critical and serious violations" >> accessibility-summary.md
        echo "2. Test with screen readers (NVDA, JAWS, VoiceOver)" >> accessibility-summary.md  
        echo "3. Verify keyboard navigation works completely" >> accessibility-summary.md
        echo "4. Check color contrast ratios meet WCAG standards" >> accessibility-summary.md
        echo "5. Ensure all interactive elements have proper focus indicators" >> accessibility-summary.md
        
        cat accessibility-summary.md
        
    - name: Upload comprehensive report
      uses: actions/upload-artifact@v3
      with:
        name: accessibility-summary-${{ github.run_number }}
        path: accessibility-summary.md